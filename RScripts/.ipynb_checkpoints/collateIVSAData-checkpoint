#! /usr/bin/env Rscript

#! /usr/bin/env R

# 0. HELPER AND INPUT SECTION
# ---------------------------

# Loading libraries
# -----------------
library(argparser, quietly = TRUE)
library(stringr, quietly = TRUE)
library(readr, quietly = TRUE)
library(dplyr, quietly = TRUE)

# Creating a parser
# -----------------
p <- argparser::arg_parser(
  "SCRIPT DESCRIPTION:
  This script runs over rewards, correct lever, and incorrect lever files to generate a single data table

DATA TABLE DESCRIPTION:

  date       |  cohort      | regimen   | group | subjectID | eventType   | eventTime
  -----------|--------------|-----------|-------|-----------|-------------|-----------
  2018-10-30 |  ICSS+IVSA   | 6H        | MALES | SG7       | rewards     | ...
  -----------|--------------|-----------|-------|-----------|-------------|-----------
  2018-10-30 |  ICSS+IVSA   | 6H        | MALES | SG7       | corrLever   | ...
  -----------|--------------|-----------|-------|-----------|-------------|-----------
  2018-10-30 |  ICSS+IVSA   | 6H        | MALES | SG7       | incorrLever | ...
  ...
  ...
  ...

EXAMPLE:
collateIVSAData <enter rewardsData fileName>

This generates a data table that is saved as ...
<date>_<cohort>_<regimen>_<group>_<subjectID>_collated.csv

CAVEAT: The script needs to be evoked in the _csvFiles directory and works on files generated using parseDayFile script
        The script generates the filenames for various events automatically, so if you're batch processing and automating file handling make sure you pass in files of only one event type

VERSION: 1.0 'Concise and Collated'
RELEASE DATE: Sun Feb 03 2019
AUTHOR: Suman Guha -- @sumankguha (github), @sug893 (code.harvard.edu)
"
)

# Add command line arguments
# --------------------------
# primary argument(s)
p <- argparser::add_argument(p, "fileName", help="Name of .csv IVSA file", type="character")
# optional argument(s)
p <- argparser::add_argument(p, "--fileSuffix", help="suffix to file name", type="character", default="collated")

# Parse command line arguments
# ----------------------------
argv <- argparser::parse_args(p)
rewardFileName = argv$fileName  # parsing file name into variable
fileSuffix = argv$fileSuffix    # parsing binwidth from variable

# ---------- debug section ----------
# rewardFileName %>% print

# 1. MAIN FUNCTION
# ----------------
fileParts <- stringr::str_split(rewardFileName, "_")[[1]] # split file name to generate metadata
date <- fileParts[1]
cohort <- fileParts[2]
regimen <- fileParts[3]
group <- fileParts[4]
subject <- fileParts[5]

# 1.1. generating file names to read from. Redundancy for operator error
# ----------------------------------------------------------------------
rewardsDataFile <- stringr::str_c(date, cohort, regimen, group, subject, "rewards.csv", sep = "_")
corrLeverDataFile <- stringr::str_c(date, cohort, regimen, group, subject, "corrLever.csv", sep = "_")
incorrLeverDataFile <- stringr::str_c(date, cohort, regimen, group, subject, "incorrLever.csv", sep = "_")

# ---------- debug section ----------
#print(rewardsDataFile)
#print(corrLeverDataFile)
#print(incorrLeverDataFile)

# 1.2 Read data in
# ----------------
rewardTimes <- readr::read_csv(rewardsDataFile)
corrLeverTimes <- readr::read_csv(corrLeverDataFile)
incorrLeverTimes <- readr::read_csv(incorrLeverDataFile)

# ---------- debug section ----------
#rewardTimes %>% print
#corrLeverTimes %>% print
#incorrLeverTimes %>% print

# 1.3 generating data frame to be saved
# -------------------------------------
rewardTimes <- rewardTimes %>% dplyr::mutate(date = date, cohort = cohort, regimen = regimen, group = group, subjectID = subject, eventType = "rewards")
rewardTimes <- rewardTimes %>% dplyr::select(date, cohort, regimen, group, subjectID, eventType, eventTime)
corrLeverTimes <- corrLeverTimes %>% dplyr::mutate(date = date, cohort = cohort, regimen = regimen, group = group, subjectID = subject, eventType = "corrLever")
corrLeverTimes <- corrLeverTimes %>% dplyr::select(date, cohort, regimen, group, subjectID, eventType, eventTime)
incorrLeverTimes <- incorrLeverTimes %>% dplyr::mutate(date = date, cohort = cohort, regimen = regimen, group = group, subjectID = subject, eventType = "incorrLever")
incorrLeverTimes <- incorrLeverTimes %>% dplyr::select(date, cohort, regimen, group, subjectID, eventType, eventTime)
output_dataTbl <- rbind(rewardTimes, corrLeverTimes, incorrLeverTimes)

# 2. SAVING DATA
# --------------
outputFileName <- stringr::str_c(date, cohort, regimen, group, subject, "collated.csv", sep = "_")
readr::write_csv(output_dataTbl, path = outputFileName)
