#! /usr/bin/env bash

# 0. HELPER SECTION
# -----------------
read -d '' usage << "BLOCK"
DESCRIPTION:
This script gathers a
USAGE:

INPUT FLAGS:

EXAMPLE:

VERSION: 1.0
RELEASE DATE: Wed Nov 07 2017
AUTHOR: Suman Guha
BLOCK

# 1. FUNCTION SECTION
# -------------------

makeTmpFiles() # Parses individual subject/animal record into its separate file
{
	# 1. Generate array of start and end line numbers for each animal
	# Generate line numbers where records start for individual animal --> Records for individual animals are separated by "Start Date:" and the last line of the whole file gives the end of the last record
	tr -d '\r' < $fileName > tempFile
	rm $fileName
	mv tempFile $fileName
	endLine=$(wc -l < $fileName)
	endLine=$(( $endLine + 1 )) # adding one to total line numbers because later the end is set as endLine - 1
	lineNums=($(awk '/Start\ Date:/ {print FNR}' $fileName) $endLine)

	# 1.2. Generate and array(s) meta-data variables
	date="$(awk 'BEGIN {FS="!"} NR==1 {print $2}' $fileName)" #fist line of the day file has the date in the desired format and is preceded by ! which is used as a record separator
	subjectList=($(awk '/Subject:/ {print $2}' $fileName)) #second record seems to be the name of the animals while the first record acts as the identifying pattern
	experimentList=($(awk '/Experiment: / {print $2}' $fileName))
	groupList=($(awk '/Group: / {print $2}' $fileName))

	# 2. Splice and save individual animal record in .tmp files
	# -----------------------------------------------------------
	subjectNums=$(( ${#subjectList[@]} - 1 ))
	for i in $(seq 0 $subjectNums)
	do
		tmpFile=$(echo $date"_"${experimentList[i]}"_"${groupList[i]}"_"${subjectList[$i]}.tmp)
		startLine=${lineNums[$i]}
		endLine=${lineNums[(( $i + 1 ))]}
		endLine=$(( $endLine - 1 ))
		sed -n "${startLine}, ${endLine}p" $fileName > $tmpFile
	done
}

makeCSV() # Parse indivual .tmp file to CSV files
{
	outputFileName=$(echo $tmpFile | sed -e 's/.tmp//') # setting output filename as .csv
	# assigning lines to extract from
	line1=$(awk '/E:/ {print FNR}' $tmpFile)	# line1 = start of "E:" field, which indicated correct lever presses
	line2=$(awk '/F:/ {print FNR}' $tmpFile)	# line2 = start of "F:" field, which indicated incorrect lever presses
	line3=$(awk '/G:/ {print FNR}' $tmpFile)	# line3 = start of "G:" field, which indicated reward dispension
	line4=$(wc -l < $tmpFile) 								# line4 = end line of the file, indicating where the G field would end
	#----------debug----------
	#echo $outputFileName
	#echo $line1
	#echo $line2
	#echo $line3
	#echo $line4

	# extracting E: F: G: fields and deleting all 0: 5: 10: ... and 0.000 values and setting them as lever press and reward times
	# ---------------------------------------------------------------------------------------------------------------------------
	corrLeverPress=$(awk -v s="$line1" -v e="$line2" 'NR>s && NR<e' $tmpFile | sed -e 's/.*: //g' | sed -e 's/ 0\.000//g' | tr -d '\n')
	incorrLeverPress=$(awk -v s="$line2" -v e="$line3" 'NR>s && NR<e' $tmpFile | sed -e 's/.*: //g' | sed -e 's/ 0\.000//g' | tr -d '\n')
	rewards=$(awk -v s="$line3" -v e="$line4" 'NR>s && NR<e' $tmpFile | sed -e 's/.*: //g' | sed -e 's/ 0\.000//g' | tr -d '\n')
	corr_varNum=$(echo $corrLeverPress | awk 'BEGIN{RS=" "; OFS=","} END{print FNR}')
	incorr_varNum=$(echo $incorrLeverPress | awk 'BEGIN{RS=" "; OFS=","} END{print FNR}')
	reward_varNum=$(echo $rewards | awk 'BEGIN{RS=" "; OFS=","} END{print FNR}')

	# Saving data to file
	outputFile=$(echo $outputFileName\_corrLever.csv)
	echo $corrLeverPress | sed 's/ /,/g' > $outputFile
	outputFile=$(echo $outputFileName\_rewards.csv)
	echo $rewards | sed 's/ /,/g' > $outputFile
	outputFile=$(echo $outputFileName\_incorrLever.csv)
	echo $incorrLeverPress | sed 's/ /,/g' > $outputFile

#	# Setting up maximum variable number so that number of padding characters can be calculated
#	max_varNum=$incorr_varNum
#	if [[ "$max_varNum" -lt "$reward_varNum" ]]; then
#		max_varNum=$reward_varNum
#	fi
#	if [[ "$max_varNum" -lt "$corr_varNum" ]]; then
#		max_varNum=$corr_varNum
#	fi
#
#	#-----debug-----
#	 #printf "%s" "$incorrLeverPress"
#	 #printf "%s" "$rewards"
#	 #printf "%s" "$corrLeverPress"
#	 #printf "%s" "$incorr_varNum $reward_varNum $corr_varNum"
#	 #printf "%s" "$max_varNum"
#
#	# Padding variables with less values to make a well-formatted CSV
#	# ---------------------------------------------------------------
#
#	# Padding for incorrect lever presses
#	insertSpaceNum=$(( $max_varNum - $incorr_varNum ))
#	if [[ "insertSpaceNum" -gt 0 ]]; then
#		insertSpaceSeq=$(seq 0 $(( $insertSpaceNum - 1 )))
#	else
#		insertSpaceSeq=$(seq 0 $insertSpaceNum)
#	fi
#	insertSeq=$(for insertSpace in $insertSpaceSeq; do printf "+"; done; printf "Done")
#
#	#-----debug-----
#	#echo $max_varNum
#	#echo $incorr_varNum
#	#echo $insertSpaceNum
#	#echo $insertSpaceSeq
#	#echo $insertSeq
#	#echo $incorrLeverPress$insertSeq
#
#	# Padding for rewards
#	insertSpaceNum=$(( $max_varNum - $reward_varNum ))
#	if [[ "insertSpaceNum" -gt 0 ]]; then
#		insertSpaceSeq=$(seq 0 $(( $insertSpaceNum - 1 )))
#	else
#		insertSpaceSeq=$(seq 0 $insertSpaceNum)
#	fi
#	insertSeq=$(for insertSpace in $insertSpaceSeq; do printf "+"; done; printf "Done")
#
#	#-----debug-----
#	#echo $insertSpaceNum
#	#echo $insertSpaceSeq
#	#echo "$insertSeq"
#	#echo "$rewards$insertSeq"
#
#	# Padding for correct lever presses
#	insertSpaceNum=$(( $max_varNum - $corr_varNum ))
#	if [[ "insertSpaceNum" -gt 0 ]]; then
#		insertSpaceSeq=$(seq 0 $(( $insertSpaceNum - 1 )))
#	else
#		insertSpaceSeq=$(seq 0 $insertSpaceNum)
#	fi
#	insertSeq=$(for insertSpace in $insertSpaceSeq; do printf "+"; done; printf "Done")
#
#	#-----debug-----
#	#echo $insertSpaceNum
#	#echo $insertSpaceSeq
#	#echo "$insertSeq"
#	#echo "$corrLeverPress$insertSeq"
}

# 2. INPUT SECTION
# -------------
# Converting flags from long form to short form
for opt in $@; do
	shift
	case $opt in
		--help) 	set -- $@ -h;;
		--file)		set -- $@ -f;;
		*)		set -- $@ $opt;;
	esac
done

# Setting parameters according to flags
while getopts "hf:" opt; do
	case $opt in
		h) echo "$usage"; exit 0;;
		f) fileName=$OPTARG;;
	esac
done

# 3. MAIN SECTION
# ---------------

# 1. Split day file into separate .tmp file per animal
# ----------------------------------------------------
makeTmpFiles # function call

# 2. Load individual animal's day file and make .csv files that show reward, correct lever press, and incorrect lever press timings
# ---------------------------------------------------------------------------------------------------------------------------------
for tmpFile in $(ls $date*.tmp)
do
	outputFileName=$(echo $tmpFile | sed -e 's/.tmp/.csv/')
	makeCSV
done
