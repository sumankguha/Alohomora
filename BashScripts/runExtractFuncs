#!/bin/bash

read -d '' usage << "BLOCK"
VERSION: 1.0
RELEASE DATE: Wed Nov 07 2017 
AUTHOR: Suman Guha

DESCRIPTION: This script crawls through an animal day directory containing .rec files of all the epochs.
Interleaves sleep and run sessions per day and runs export functions.
Writes the arguments passed into the export functions in exportFuncArg.log for reference.
Writes 'epochs.log' in the folder to indicate the total number of epochs for later processing in matlab.
The logs of each export function are also saved in the folder

DEPENDECIES: Requires that you have trodes extraction programs written my Mattias Karlsson in path
	- exporttime
	- exportLFP
	- exportspikes
       	- exportdio

USAGE: runExtractFuncs -FLAGS|--LONG_NAME_OF_FLAGS <ARGUMENTS>

INPUT FLAGS:
--dataDir	: The folder for the animal where the day with epochs is stored
--sleepSession	: Snippet of the sleep epoch (character sensitive). E.g., Sleep
--runSession	: Snippet of the run epoch (character sensitive). E.g., Odor, W-Track 
--animalID	: Animal ID. E.g. SG4, CS31
--configFile    : Path to folder where config file is present

EXAMPLE:	
If in directory of animal (CS31), where the Run and Sleep epochs are named 

CS31_20170201_OdorPlace_01.rec
CS31_20170201_OdorPlace_02.rec

and ... 

CS31_20170201_Sleep_01.rec
CS31_20170201_Sleep_02.rec
CS31_20170201_Sleep_03.rec

then run: runExtractFuncs --dataDir $(pwd) --sleepSession Sleep --runSession Odor --animalID CS31
or run: runExtractFuncs --dataDir $(pwd) --sleepSession Sleep --runSession Odor --animalID CS31 --configFile /absolute/path/to/config/file.trodesconf

BLOCK

# Main export function definition
runExportFuncs()
{
    # entering directory and generating log files
    cd $1			
#    logDir=$(pwd)/$4_$(basename $(pwd)| sed 's/^.*_//')_Logs
#    if [! -d "$logDir" ]; then
#        mkdir $logDir
#    fi
	echo "generating list of $2 epoch rec files in $1"
    ls *$2*.rec | sort > $2.txt
    echo "generating list of $3 epoch rec files in $1"
    ls *$3*.rec | sort > $3.txt
	echo "storing total epoch numbers in epochs.log"
	echo $(($(cat $2.txt | wc -l) + $(cat $3.txt | wc -l))) > $epochs.log
	exportFuncArg=$(paste -d'!' $2.txt $3.txt | tr '\n' '!' | sed 's/!!$//' | sed 's/!/ -rec /g')
	echo $exportFuncArg > exportFuncArg.log
    exportFuncOutput=$(sed -r 'H;1h;$!d;x; s/(([^_]*_){2}).*/\1/' $2.txt | sed 's/_$//')
    echo $exportFuncOutput > exportFuncOutput.txt
	logFile=$4_$(basename $(pwd)).log
	timeLog=$(echo $logFile | sed 's/\.log/_time\.log/')
    lfpLog=$(echo $logFile | sed 's/\.log/_lfp\.log/')
    spikesLog=$(echo $logFile | sed 's/\.log/_spikes\.log/')
    dioLog=$(echo $logFile | sed 's/\.log/_dio\.log/')
	# running export functions
    if [ $# -eq 4 ]; then
        exporttime -rec $exportFuncArg -output $exportFuncOutput &> $timeLog 
        exportLFP -rec $exportFuncArg -output $exportFuncOutput &> $lfpLog
        exportspikes -rec $exportFuncArg -output $exportFuncOutput &> $spikesLog
        exportdio -rec $exportFuncArg -output $exportFuncOutput &> $dioLog
    else
        exporttime -rec $exportFuncArg -reconfig $5 -output $exportFuncOutput &> $timeLog 
        exportLFP -rec $exportFuncArg -reconfig $5  -output $exportFuncOutput &> $lfpLog
        exportspikes -rec $exportFuncArg -reconfig $5 -output $exportFuncOutput &> $spikesLog
        exportdio -rec $exportFuncArg -reconfig $5 -output $exportFuncOutput &> $dioLog
    fi
#    mv *.log $logDir/ && mv *.txt $logDir/
	cd ..			# exiting directory
}

# Converting flags from long form to short form
for opt in $@; do
	shift
	case $opt in
		--dataDir) 	set -- $@ -d;;
		--sleepSession)	set -- $@ -s;;
		--runSession)	set -- $@ -r;;
		--animalID)	set -- $@ -a;;
        --configFile) set -- $@ -c;;
		--help) 	set -- $@ -h;;
		*)		set -- $@ $opt;;
	esac
done

# Setting parameters according to flags

while getopts "hd:s:r:a:c:" opt; do
	case $opt in
		h) echo "$usage"; exit 0;;
		d) dataDir=$OPTARG;;
		s) sleepSession=$OPTARG;;
		r) runSession=$OPTARG;;
		a) animalID=$OPTARG;;
        c) configFile=$OPTARG;;
	esac
done

if [ $# -eq 8 ]; then
	runExportFuncs $dataDir $sleepSession $runSession $animalID &
elif [ $# -eq 10 ]; then
	runExportFuncs $dataDir $sleepSession $runSession $animalID $configFile &
else
	echo "Incomplete argument list"
	echo "$usage"
	exit 1
fi


